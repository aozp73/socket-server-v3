/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socket.server.v3.temp;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;

import socket.server.v3.App;

// 쓰기라는 행위와 읽기라는 행위를 쓰레드 활용
// 이렇게 1:1 연결하는 것을 p2p연결이라고 함 (point to point)
public class AppBackup {

    ServerSocket serverSocket;
    Socket socket;
    BufferedReader br, keyboard;
    BufferedWriter bw;

    // 여기서만 쓸 것이기 때문에 내부 클래스로 구현
    // 내부 클래스는 위에 선언한 heap 변수 공유 가능
    class ReadThread implements Runnable {
        @Override
        public void run() {
            while (true) {
                try {
                    String clientInput = br.readLine();
                    System.out.println("받은 메시지 : " + clientInput);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public AppBackup() {

        try {
            serverSocket = new ServerSocket(10000);
            socket = serverSocket.accept(); // while을 돌면서 대기

            bw = new BufferedWriter(
                    new OutputStreamWriter(socket.getOutputStream()));

            br = new BufferedReader(
                    new InputStreamReader(socket.getInputStream()));

            keyboard = new BufferedReader(
                    new InputStreamReader(System.in));

            // 실이 한개로 오다가 여기부터 실이 2개로 나뉨
            // 읽기 쓰레드 실행
            // new ReadThread() -> 타겟
            Thread t1 = new Thread(new ReadThread());
            t1.start();

            while (true) {
                // 메인 쓰레드는 쓰기 실행(메시지 전송)
                String keyboardInput = keyboard.readLine();
                bw.write(keyboardInput + "\n"); // 버퍼에 쓰기
                bw.flush(); // 전송
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static void main(String[] args) {
        new App();
    }
}

// 1. 서버 소켓 생성

// 2. 소켓 생성

// 3. 쓰기 버퍼 생성

// 4. 읽기 버퍼 생성

// 5. 키보드 읽기 버퍼 생성

// 6. 메인쓰레드는 메시지 전송

// 7. 읽기쓰레드는 메시지 받기