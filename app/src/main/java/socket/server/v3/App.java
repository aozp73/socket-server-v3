/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socket.server.v3;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;

public class App {

    ServerSocket serverSocket; // 1개
    // ArrayList와 동일한데, 동기화가 지원됨.
    // Thread Safe : 한 명이 접근하여 사용 중일 때, 다른 사람은 접근못하게 막아야함
    // ArrayList는 이런 동기화 지원이 안됨
    // Thread가 있는 프로그램은 자원을 Vector로 만들어서 위 내용을 활용
    Vector<SocketThread> vc;

    // 소켓을 만들 때마다 SocketThread를 new로 인스턴스에 띄움
    class SocketThread implements Runnable {
        // 클라이언트 개수 만큼
        Socket socket;
        BufferedReader br;
        BufferedWriter bw;

        // SocketThread는 소켓 생성만 하는 역할
        public SocketThread(Socket socket) {
            try {
                this.socket = socket;
                this.bw = new BufferedWriter(
                        new OutputStreamWriter(socket.getOutputStream()));
                this.br = new BufferedReader(
                        new InputStreamReader(socket.getInputStream()));
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        @Override
        public void run() {
            // 모든 클라이언트에게 메시지 전송
            try {
                while (true) {
                    String input = br.readLine(); // 대기
                    for (SocketThread socketThread : vc) {
                        if (socketThread != this) {
                            socketThread.bw.write(input + "안녕\n");
                            socketThread.bw.flush();
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }

    // 메인 스레드 : 서버 소켓 생성, 클라이언트 요청되면 소켓 생성
    // 서브 스레드 : 안녕이라고 오면 다른 클라이언트에 전달
    public App() {

        try {
            serverSocket = new ServerSocket(10000);
            vc = new Vector<>();

            while (true) {
                // 메인쓰레드는 새로운 소켓을 생성
                Socket socket = serverSocket.accept();
                // 소켓이 연결 되면 실 하나 추가
                // vector에 넣으려고 아까랑 다르게 담는 변수 생성
                SocketThread st = new SocketThread(socket);
                Thread t1 = new Thread(st);
                t1.start();
                // 소켓만 담는 것이 아닌 필드 전체를 담음
                // 필드구성 : Socket, BufferedReader, BufferedWriter, run()
                vc.add(st);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static void main(String[] args) {
        new App();
    }
}
